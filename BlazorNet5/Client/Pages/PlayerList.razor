@page "/players"
@inject IPlayersListPageController PageController
@implements IDisposable

<h1>AC Milan - Player roster</h1>
<h3>(and contract expirations reminder...)</h3>

<a class="btn btn-primary" href="/players/new">New...</a>
<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Number</th>
            <th>Name</th>
            <th>Role</th>
            <th>Expires on</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <Virtualize @ref="this.PageController.Virtualize" Context="player" ItemsProvider="this.PageController.GetPlayers" ItemSize="220">
            <ItemContent>
                <tr data-priority="@player.ExtendNow">
                    <td>
                        <PlayerPhoto Player="player" />
                    </td>
                    <td>@player.Number</td>
                    <td>@player.Name</td>
                    <td>@player.Role</td>
                    <td>@player.ExpiryDate.ToShortDateString()</td>
                    <td>
                        <a class="btn btn-primary" href="/players/@(player.Id)">Edit</a>&nbsp;&nbsp;
                        <CoolComponentsLibrary.ConfirmButton class="btn btn-danger"
                                                             OnClick="@(async e => await this.PageController.DeletePlayerAsync(player.Id))">
                            Delete
                        </CoolComponentsLibrary.ConfirmButton>
                    </td>
                </tr>
            </ItemContent>
            <Placeholder>
                <p><em>Loading....</em></p>
            </Placeholder>
        </Virtualize>
    </tbody>
</table>

@code {
    protected override async Task OnInitializedAsync()
    {
        this.PageController.DataHasChanged += StateHasChanged;
    }

    public void Dispose()
    {
        this.PageController.DataHasChanged -= StateHasChanged;
    }
}
